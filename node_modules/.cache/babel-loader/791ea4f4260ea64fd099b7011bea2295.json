{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Franci\\\\Desktop\\\\starting-projects-Udemy\\\\10-starting-project (authentication)\\\\src\\\\components\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 3600) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(null);\n  const tokenData = retrieveStoredToken();\n  const userIsLoggedIn = !!token;\n\n  const handleLogin = token => {\n    setToken(token);\n  };\n\n  const handleLogout = () => {\n    setToken(null);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: handleLogin,\n    logout: handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"uIJwMdUkDylZ+kns2VUAKSAAoVY=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/Franci/Desktop/starting-projects-Udemy/10-starting-project (authentication)/src/components/store/auth-context.js"],"names":["React","useState","createContext","AuthContext","token","isLoggedIn","login","logout","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","calculateRemainingTime","removeItem","duration","AuthContextProvider","props","setToken","tokenData","userIsLoggedIn","handleLogin","handleLogout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAEIC,QAFJ,EAGIC,aAHJ,QAIO,OAJP;;AAOA,MAAMC,WAAW,gBAAGD,aAAa,CAAE;AAC/BE,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,UAAU,EAAE,KAFmB;AAG/BC,EAAAA,KAAK,EAAIF,KAAF,IAAa,CAAE,CAHS;AAI/BG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJe,CAAF,CAAjC;;AAOA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,QAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA7B;AAEA,QAAME,aAAa,GAAGC,sBAAsB,CAAGF,oBAAH,CAA5C;;AAEA,MAAIC,aAAa,IAAI,IAArB,EAA2B;AACzBH,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACAL,IAAAA,YAAY,CAACK,UAAb,CAAwB,gBAAxB;AACA,WAAO,IAAP;AACD;;AAED,SAAO;AACLX,IAAAA,KAAK,EAAEK,WADF;AAELO,IAAAA,QAAQ,EAAEH;AAFL,GAAP;AAID,CAhBD;;AAkBA,OAAO,MAAMI,mBAAmB,GAAKC,KAAF,IAAa;AAAA;;AAE5C,QAAM,CAAEd,KAAF,EAASe,QAAT,IAAsBlB,QAAQ,CAAG,IAAH,CAApC;AACA,QAAMmB,SAAS,GAAGZ,mBAAmB,EAArC;AAEA,QAAMa,cAAc,GAAG,CAAC,CAACjB,KAAzB;;AAEA,QAAMkB,WAAW,GAAKlB,KAAF,IAAa;AAC7Be,IAAAA,QAAQ,CAAGf,KAAH,CAAR;AACH,GAFD;;AAIA,QAAMmB,YAAY,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAAG,IAAH,CAAR;AACH,GAFD;;AAIA,QAAMK,YAAY,GAAG;AACjBpB,IAAAA,KAAK,EAAEA,KADU;AAEjBC,IAAAA,UAAU,EAAEgB,cAFK;AAGjBf,IAAAA,KAAK,EAAEgB,WAHU;AAIjBf,IAAAA,MAAM,EAAEgB;AAJS,GAArB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAKC,YAAhC;AAAA,cACMN,KAAK,CAACO;AADZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA3BM;;GAAMR,mB;;KAAAA,mB;AA6Bb,eAAed,WAAf","sourcesContent":["import React,\r\n{\r\n    useState,\r\n    createContext\r\n} from \"react\";\r\n\r\n\r\nconst AuthContext = createContext ({\r\n    token: \"\",\r\n    isLoggedIn: false,\r\n    login: ( token ) => {},\r\n    logout: () => {}\r\n});\r\n\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remainingTime = calculateRemainingTime ( storedExpirationDate );\r\n\r\n  if (remainingTime <= 3600) { \r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    token: storedToken,\r\n    duration: remainingTime,\r\n  };\r\n};\r\n\r\nexport const AuthContextProvider = ( props ) => {\r\n\r\n    const [ token, setToken ] = useState ( null );\r\n    const tokenData = retrieveStoredToken();\r\n\r\n    const userIsLoggedIn = !!token;\r\n\r\n    const handleLogin = ( token ) => {\r\n        setToken ( token );\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        setToken ( null );\r\n    };\r\n\r\n    const contextValue = {\r\n        token: token,\r\n        isLoggedIn: userIsLoggedIn,\r\n        login: handleLogin,\r\n        logout: handleLogout\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value = { contextValue }>\r\n            { props.children }\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}