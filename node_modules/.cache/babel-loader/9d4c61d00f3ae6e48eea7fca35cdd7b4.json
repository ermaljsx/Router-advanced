{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Franci\\\\Desktop\\\\starting-projects-Udemy\\\\10-starting-project (authentication)\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSwitchAuthMode = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; // optional: Add validation\n\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBZ9wc5jvpLUYnZefBqWCWlsocKQjUsqCQ\";\n    } else {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBZ9wc5jvpLUYnZefBqWCWlsocKQjUsqCQ\";\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = \"Authentication failed!\"; // if (data && data.error && data.error.message) {\n          //   errorMessage = data.error.message;\n          // }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000);\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      history.replace(\"/\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          ref: emailInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          ref: passwordInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: handleSwitchAuthMode,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"uSzWIeCm8nJlz5W8tMYLEaDIzM4=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/Franci/Desktop/starting-projects-Udemy/10-starting-project (authentication)/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","useHistory","AuthContext","classes","AuthForm","history","emailInputRef","passwordInputRef","authCtx","isLogin","setIsLogin","isLoading","setIsLoading","handleSwitchAuthMode","prevState","handleSubmit","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorMessage","Error","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","replace","catch","err","alert","message","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import {\n  useState,\n  useRef,\n  useContext\n} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthContext from \"../store/auth-context\";\nimport classes from \"./AuthForm.module.css\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext( AuthContext );\n  const [ isLogin, setIsLogin ] = useState ( true );\n  const [ isLoading, setIsLoading ] = useState ( false );\n\n  const handleSwitchAuthMode = () => {\n    setIsLogin (\n      ( prevState ) => !prevState\n    );\n  };\n\n  const handleSubmit = ( event ) => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    // optional: Add validation\n\n    setIsLoading( true );\n    let url;\n    if ( isLogin ) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBZ9wc5jvpLUYnZefBqWCWlsocKQjUsqCQ\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBZ9wc5jvpLUYnZefBqWCWlsocKQjUsqCQ\";\n    }\n    fetch(\n      url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then( ( res ) => {\n        setIsLoading ( false );\n        if ( res.ok ) {\n          return res.json();\n        } else {\n          return res.json().then( ( data ) => {\n            let errorMessage = \"Authentication failed!\";\n            // if (data && data.error && data.error.message) {\n            //   errorMessage = data.error.message;\n            // }\n\n            throw new Error ( errorMessage );\n          });\n        }\n      })\n      .then( ( data ) => {\n        const expirationTime = new Date (\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n        authCtx.login(\n          data.idToken,\n          expirationTime.toISOString()\n        );\n        history.replace(\"/\");\n      })\n      .catch( ( err ) => {\n        alert( err.message );\n      });\n  };\n\n  return (\n    <section className = { classes.auth }>\n      <h1>\n        { isLogin ? \"Login\" : \"Sign Up\" }\n      </h1>\n      <form onSubmit = { handleSubmit }>\n        <div className = {classes.control}>\n          <label htmlFor = \"email\">Your Email</label>\n          <input\n            type = \"email\"\n            id = \"email\"\n            ref = { emailInputRef }\n            required\n          />\n        </div>\n\n        <div className = {classes.control}>\n          <label htmlFor = \"password\">Your Password</label>\n          <input\n            type = \"password\"\n            id = \"password\"\n            ref = { passwordInputRef }\n            required\n          />\n        </div>\n\n        <div className = { classes.actions }>\n          { !isLoading && (\n            <button>\n              {\n                isLogin ? \"Login\" : \"Create Account\"\n              }\n            </button>\n          )}\n          { isLoading && <p>Sending request...</p> }\n\n          <button\n            type = \"button\"\n            className = { classes.toggle }\n            onClick = { handleSwitchAuthMode }\n          >\n            { isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;"]},"metadata":{},"sourceType":"module"}