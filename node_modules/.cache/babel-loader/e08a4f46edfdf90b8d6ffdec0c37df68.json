{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParametrizedRoute = getParametrizedRoute;\nexports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module\n// to reduce bytes\n\nfunction escapeRegex(str) {\n  return str.replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n}\n\nfunction parseParameter(param) {\n  const optional = param.startsWith('[') && param.endsWith(']');\n\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n\n  const repeat = param.startsWith('...');\n\n  if (repeat) {\n    param = param.slice(3);\n  }\n\n  return {\n    key: param,\n    repeat,\n    optional\n  };\n}\n\nfunction getParametrizedRoute(route) {\n  const segments = (route.replace(/\\/$/, '') || '/').slice(1).split('/');\n  const groups = {};\n  let groupIndex = 1;\n  const parameterizedRoute = segments.map(segment => {\n    if (segment.startsWith('[') && segment.endsWith(']')) {\n      const {\n        key,\n        optional,\n        repeat\n      } = parseParameter(segment.slice(1, -1));\n      groups[key] = {\n        pos: groupIndex++,\n        repeat,\n        optional\n      };\n      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n    } else {\n      return `/${escapeRegex(segment)}`;\n    }\n  }).join(''); // dead code eliminate for browser since it's only needed\n  // while generating routes-manifest\n\n  if (typeof window === 'undefined') {\n    let routeKeyCharCode = 97;\n    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters\n\n    const getSafeRouteKey = () => {\n      let routeKey = '';\n\n      for (let i = 0; i < routeKeyCharLength; i++) {\n        routeKey += String.fromCharCode(routeKeyCharCode);\n        routeKeyCharCode++;\n\n        if (routeKeyCharCode > 122) {\n          routeKeyCharLength++;\n          routeKeyCharCode = 97;\n        }\n      }\n\n      return routeKey;\n    };\n\n    const routeKeys = {};\n    let namedParameterizedRoute = segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break\n        // the named regex\n\n        let cleanedKey = key.replace(/\\W/g, '');\n        let invalidKey = false; // check if the key is still invalid and fallback to using a known\n        // safe key\n\n        if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n          invalidKey = true;\n        }\n\n        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {\n          invalidKey = true;\n        }\n\n        if (invalidKey) {\n          cleanedKey = getSafeRouteKey();\n        }\n\n        routeKeys[cleanedKey] = key;\n        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n      } else {\n        return `/${escapeRegex(segment)}`;\n      }\n    }).join('');\n    return {\n      parameterizedRoute,\n      namedParameterizedRoute,\n      groups,\n      routeKeys\n    };\n  }\n\n  return {\n    parameterizedRoute,\n    groups\n  };\n}\n\nfunction getRouteRegex(normalizedRoute) {\n  const result = getParametrizedRoute(normalizedRoute);\n\n  if ('routeKeys' in result) {\n    return {\n      re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n      groups: result.groups,\n      routeKeys: result.routeKeys,\n      namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`\n    };\n  }\n\n  return {\n    re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n    groups: result.groups\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/route-regex.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getParametrizedRoute = getParametrizedRoute;\nexports.getRouteRegex = getRouteRegex;\n// this isn't importing the escape-string-regex module\n// to reduce bytes\nfunction escapeRegex(str) {\n    return str.replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&');\n}\nfunction parseParameter(param) {\n    const optional = param.startsWith('[') && param.endsWith(']');\n    if (optional) {\n        param = param.slice(1, -1);\n    }\n    const repeat = param.startsWith('...');\n    if (repeat) {\n        param = param.slice(3);\n    }\n    return {\n        key: param,\n        repeat,\n        optional\n    };\n}\nfunction getParametrizedRoute(route) {\n    const segments = (route.replace(/\\/$/, '') || '/').slice(1).split('/');\n    const groups = {\n    };\n    let groupIndex = 1;\n    const parameterizedRoute = segments.map((segment)=>{\n        if (segment.startsWith('[') && segment.endsWith(']')) {\n            const { key , optional , repeat  } = parseParameter(segment.slice(1, -1));\n            groups[key] = {\n                pos: groupIndex++,\n                repeat,\n                optional\n            };\n            return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n        } else {\n            return `/${escapeRegex(segment)}`;\n        }\n    }).join('');\n    // dead code eliminate for browser since it's only needed\n    // while generating routes-manifest\n    if (typeof window === 'undefined') {\n        let routeKeyCharCode = 97;\n        let routeKeyCharLength = 1;\n        // builds a minimal routeKey using only a-z and minimal number of characters\n        const getSafeRouteKey = ()=>{\n            let routeKey = '';\n            for(let i = 0; i < routeKeyCharLength; i++){\n                routeKey += String.fromCharCode(routeKeyCharCode);\n                routeKeyCharCode++;\n                if (routeKeyCharCode > 122) {\n                    routeKeyCharLength++;\n                    routeKeyCharCode = 97;\n                }\n            }\n            return routeKey;\n        };\n        const routeKeys = {\n        };\n        let namedParameterizedRoute = segments.map((segment)=>{\n            if (segment.startsWith('[') && segment.endsWith(']')) {\n                const { key , optional , repeat  } = parseParameter(segment.slice(1, -1));\n                // replace any non-word characters since they can break\n                // the named regex\n                let cleanedKey = key.replace(/\\W/g, '');\n                let invalidKey = false;\n                // check if the key is still invalid and fallback to using a known\n                // safe key\n                if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n                    invalidKey = true;\n                }\n                if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {\n                    invalidKey = true;\n                }\n                if (invalidKey) {\n                    cleanedKey = getSafeRouteKey();\n                }\n                routeKeys[cleanedKey] = key;\n                return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n            } else {\n                return `/${escapeRegex(segment)}`;\n            }\n        }).join('');\n        return {\n            parameterizedRoute,\n            namedParameterizedRoute,\n            groups,\n            routeKeys\n        };\n    }\n    return {\n        parameterizedRoute,\n        groups\n    };\n}\nfunction getRouteRegex(normalizedRoute) {\n    const result = getParametrizedRoute(normalizedRoute);\n    if ('routeKeys' in result) {\n        return {\n            re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n            groups: result.groups,\n            routeKeys: result.routeKeys,\n            namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`\n        };\n    }\n    return {\n        re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n        groups: result.groups\n    };\n}\n\n//# sourceMappingURL=route-regex.js.map"]},"metadata":{},"sourceType":"script"}