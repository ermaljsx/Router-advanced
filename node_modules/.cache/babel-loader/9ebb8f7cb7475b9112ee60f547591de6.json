{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatUrl = formatUrl;\n\nvar querystring = _interopRequireWildcard(require(\"./querystring\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nconst slashedProtocols = /https?|ftp|gopher|file/;\n\nfunction formatUrl(urlObj) {\n  let {\n    auth,\n    hostname\n  } = urlObj;\n  let protocol = urlObj.protocol || '';\n  let pathname = urlObj.pathname || '';\n  let hash = urlObj.hash || '';\n  let query = urlObj.query || '';\n  let host = false;\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n\n  if (urlObj.host) {\n    host = auth + urlObj.host;\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);\n\n    if (urlObj.port) {\n      host += ':' + urlObj.port;\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query));\n  }\n\n  let search = urlObj.search || query && `?${query}` || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash;\n  if (search && search[0] !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n  search = search.replace('#', '%23');\n  return `${protocol}${host}${pathname}${search}${hash}`;\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/format-url.ts"],"names":[],"mappings":";;;;;QA4BgB,S,GAAA,S;;AAJJ,IAAA,WAAW,GAAA,uBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,MAAM,gBAAgB,GAAA,wBAAtB;;SAEgB,S,CAAU,M,EAAmB;AAC3C,MAAI;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,MAAqB,MAAzB;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,IAAmB,EAAlC;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,IAAmB,EAAlC;AACA,MAAI,IAAI,GAAG,MAAM,CAAC,IAAP,IAAe,EAA1B;AACA,MAAI,KAAK,GAAG,MAAM,CAAC,KAAP,IAAgB,EAA5B;AACA,MAAI,IAAI,GAAmB,KAA3B;AAEA,EAAA,IAAI,GAAG,IAAI,GAAG,kBAAkB,CAAC,IAAD,CAAlB,CAAyB,OAAzB,CAAgC,MAAhC,EAAyC,GAAzC,IAAgD,GAAnD,GAAyD,EAApE;;AAEA,MAAI,MAAM,CAAC,IAAX,EAAiB;AACf,IAAA,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,IAArB;AACD,GAFD,MAEO,IAAI,QAAJ,EAAc;AACnB,IAAA,IAAI,GAAG,IAAI,IAAA,CAAK,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAL,GAA8B,IAAG,QAAS,GAA1C,GAA+C,QAA/C,CAAX;;AACA,QAAI,MAAM,CAAC,IAAX,EAAiB;AACf,MAAA,IAAI,IAAI,MAAM,MAAM,CAAC,IAArB;AACD;AACF;;AAED,MAAI,KAAK,IAAI,OAAO,KAAP,KAAiB,QAA9B,EAAwC;AACtC,IAAA,KAAK,GAAG,MAAM,CAxBN,WAAW,CAwBQ,sBAxBnB,CAwB0C,KAxB1C,CAwBM,CAAd;AACD;;AAED,MAAI,MAAM,GAAG,MAAM,CAAC,MAAP,IAAkB,KAAK,IAAK,IAAG,KAAK,EAApC,IAA2C,EAAxD;AAEA,MAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,CAAe,CAAE,CAAjB,MAAwB,GAAxC,EAA6C,QAAQ,IAAI,GAAZ;;AAE7C,MACE,MAAM,CAAC,OAAP,IAAc,CAAA,CACX,QADW,IACC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CADD,KACqC,IAAI,KAAK,KAF9D,EAGE;AACA,IAAA,IAAI,GAAG,QAAQ,IAAI,IAAI,EAAhB,CAAP;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAAhC,EAAqC,QAAQ,GAAG,MAAM,QAAjB;AACtC,GAND,MAMO,IAAE,CAAG,IAAL,EAAW;AAChB,IAAA,IAAI,GAAG,EAAP;AACD;;AAED,MAAI,IAAI,IAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAxB,EAA6B,IAAI,GAAG,MAAM,IAAb;AAC7B,MAAI,MAAM,IAAI,MAAM,CAAC,CAAD,CAAN,KAAc,GAA5B,EAAiC,MAAM,GAAG,MAAM,MAAf;AAEjC,EAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAgB,OAAhB,EAA0B,kBAA1B,CAAX;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,GAAf,EAAoB,KAApB,CAAT;AAEA,SAAM,GAAI,QAAQ,GAAG,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,IAAI,EAApD;AACD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.formatUrl = formatUrl;\nvar querystring = _interopRequireWildcard(require(\"./querystring\"));\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {\n        };\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {\n                    };\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nconst slashedProtocols = /https?|ftp|gopher|file/;\nfunction formatUrl(urlObj) {\n    let { auth , hostname  } = urlObj;\n    let protocol = urlObj.protocol || '';\n    let pathname = urlObj.pathname || '';\n    let hash = urlObj.hash || '';\n    let query = urlObj.query || '';\n    let host = false;\n    auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n    if (urlObj.host) {\n        host = auth + urlObj.host;\n    } else if (hostname) {\n        host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);\n        if (urlObj.port) {\n            host += ':' + urlObj.port;\n        }\n    }\n    if (query && typeof query === 'object') {\n        query = String(querystring.urlQueryToSearchParams(query));\n    }\n    let search = urlObj.search || query && `?${query}` || '';\n    if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n    if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n        host = '//' + (host || '');\n        if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n    } else if (!host) {\n        host = '';\n    }\n    if (hash && hash[0] !== '#') hash = '#' + hash;\n    if (search && search[0] !== '?') search = '?' + search;\n    pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n    search = search.replace('#', '%23');\n    return `${protocol}${host}${pathname}${search}${hash}`;\n}\n\n//# sourceMappingURL=format-url.js.map"]},"metadata":{},"sourceType":"script"}