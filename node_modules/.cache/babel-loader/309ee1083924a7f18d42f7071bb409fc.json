{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRelativeUrl = parseRelativeUrl;\n\nvar _utils = require(\"../../utils\");\n\nvar _querystring = require(\"./querystring\");\n\nfunction parseRelativeUrl(url, base) {\n  const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils).getLocationOrigin());\n  const resolvedBase = base ? new URL(base, globalBase) : globalBase;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`);\n  }\n\n  return {\n    pathname,\n    query: (0, _querystring).searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(globalBase.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/parse-relative-url.ts"],"names":[],"mappings":";;;;;QASgB,gB,GAAA,gB;;AATkB,IAAA,MAAa,GAAA,OAAA,CAAA,aAAA,CAAb;;AACK,IAAA,YAAe,GAAA,OAAA,CAAA,eAAA,CAAf;;SAQvB,gB,CAAiB,G,EAAa,I,EAAe;AAC3D,QAAM,UAAU,GAAG,IAAI,GAAJ,CACjB,OAAO,MAAP,KAAkB,WAAlB,GAAgC,UAAhC,GAA0C,CAAA,GAXZ,MAWY,EAXC,iBAWD,EADzB,CAAnB;AAGA,QAAM,YAAY,GAAG,IAAI,GAAG,IAAI,GAAJ,CAAQ,IAAR,EAAc,UAAd,CAAH,GAA+B,UAAxD;AACA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,YAAZ;AAA0B,IAAA,MAA1B;AAAkC,IAAA,IAAlC;AAAwC,IAAA,IAAxC;AAA8C,IAAA;AAA9C,MAAyD,IAAI,GAAJ,CAC7D,GAD6D,EAE7D,YAF6D,CAA/D;;AAIA,MAAI,MAAM,KAAK,UAAU,CAAC,MAA1B,EAAkC;AAChC,UAAM,IAAI,KAAJ,CAAW,oDAAmD,GAAG,EAAjE,CAAN;AACD;;AACD,SAAO;AACL,IAAA,QADK;AAEL,IAAA,KAAK,EAAA,CAAA,GAtB8B,YAsB9B,EAtB6C,sBAsB7C,CAAyB,YAAzB,CAFA;AAGL,IAAA,MAHK;AAIL,IAAA,IAJK;AAKL,IAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,MAAX,CAAkB,MAA7B;AALD,GAAP;AAOD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.parseRelativeUrl = parseRelativeUrl;\nvar _utils = require(\"../../utils\");\nvar _querystring = require(\"./querystring\");\nfunction parseRelativeUrl(url, base) {\n    const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils).getLocationOrigin());\n    const resolvedBase = base ? new URL(base, globalBase) : globalBase;\n    const { pathname , searchParams , search , hash , href , origin  } = new URL(url, resolvedBase);\n    if (origin !== globalBase.origin) {\n        throw new Error(`invariant: invalid relative URL, router received ${url}`);\n    }\n    return {\n        pathname,\n        query: (0, _querystring).searchParamsToUrlQuery(searchParams),\n        search,\n        hash,\n        href: href.slice(globalBase.origin.length)\n    };\n}\n\n//# sourceMappingURL=parse-relative-url.js.map"]},"metadata":{},"sourceType":"script"}