{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultHead = defaultHead;\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _sideEffect = _interopRequireDefault(require(\"./side-effect\"));\n\nvar _ampContext = require(\"./amp-context\");\n\nvar _headManagerContext = require(\"./head-manager-context\");\n\nvar _amp = require(\"./amp\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction defaultHead() {\n  let inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const head = [/*#__PURE__*/_react.default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  })];\n\n  if (!inAmpMode) {\n    head.push( /*#__PURE__*/_react.default.createElement(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width\"\n    }));\n  }\n\n  return head;\n}\n\nfunction onlyReactElement(list, child) {\n  // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n  if (typeof child === 'string' || typeof child === 'number') {\n    return list;\n  } // Adds support for React.Fragment\n\n\n  if (child.type === _react.default.Fragment) {\n    return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild) => {\n      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n        return fragmentList;\n      }\n\n      return fragmentList.concat(fragmentChild);\n    }, []));\n  }\n\n  return list.concat(child);\n}\n\nconst METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/\n\nfunction unique() {\n  const keys = new Set();\n  const tags = new Set();\n  const metaTypes = new Set();\n  const metaCategories = {};\n  return h => {\n    let isUnique = true;\n    let hasKey = false;\n\n    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n      hasKey = true;\n      const key = h.key.slice(h.key.indexOf('$') + 1);\n\n      if (keys.has(key)) {\n        isUnique = false;\n      } else {\n        keys.add(key);\n      }\n    } // eslint-disable-next-line default-case\n\n\n    switch (h.type) {\n      case 'title':\n      case 'base':\n        if (tags.has(h.type)) {\n          isUnique = false;\n        } else {\n          tags.add(h.type);\n        }\n\n        break;\n\n      case 'meta':\n        for (let i = 0, len = METATYPES.length; i < len; i++) {\n          const metatype = METATYPES[i];\n          if (!h.props.hasOwnProperty(metatype)) continue;\n\n          if (metatype === 'charSet') {\n            if (metaTypes.has(metatype)) {\n              isUnique = false;\n            } else {\n              metaTypes.add(metatype);\n            }\n          } else {\n            const category = h.props[metatype];\n            const categories = metaCategories[metatype] || new Set();\n\n            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n              isUnique = false;\n            } else {\n              categories.add(category);\n              metaCategories[metatype] = categories;\n            }\n          }\n        }\n\n        break;\n    }\n\n    return isUnique;\n  };\n}\n/**\n *\n * @param headElements List of multiple <Head> instances\n */\n\n\nfunction reduceComponents(headElements, props) {\n  return headElements.reduce((list, headElement) => {\n    const headElementChildren = _react.default.Children.toArray(headElement.props.children);\n\n    return list.concat(headElementChildren);\n  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map((c, i) => {\n    const key = c.key || i;\n\n    if (process.env.NODE_ENV !== 'development' && process.env.__NEXT_OPTIMIZE_FONTS && !props.inAmpMode) {\n      if (c.type === 'link' && c.props['href'] && // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n      ['https://fonts.googleapis.com/css', 'https://use.typekit.net/'].some(url => c.props['href'].startsWith(url))) {\n        const newProps = { ...(c.props || {})\n        };\n        newProps['data-href'] = newProps['href'];\n        newProps['href'] = undefined; // Add this attribute to make it easy to identify optimized tags\n\n        newProps['data-optimized-fonts'] = true;\n        return /*#__PURE__*/_react.default.cloneElement(c, newProps);\n      }\n    }\n\n    return /*#__PURE__*/_react.default.cloneElement(c, {\n      key\n    });\n  });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */\n\n\nfunction Head(_ref) {\n  let {\n    children\n  } = _ref;\n  const ampState = (0, _react).useContext(_ampContext.AmpStateContext);\n  const headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  return /*#__PURE__*/_react.default.createElement(_sideEffect.default, {\n    reduceComponentsToState: reduceComponents,\n    headManager: headManager,\n    inAmpMode: (0, _amp).isInAmpMode(ampState)\n  }, children);\n}\n\nvar _default = Head;\nexports.default = _default;","map":{"version":3,"sources":["../../../shared/lib/head.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.defaultHead = defaultHead;\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _sideEffect = _interopRequireDefault(require(\"./side-effect\"));\nvar _ampContext = require(\"./amp-context\");\nvar _headManagerContext = require(\"./head-manager-context\");\nvar _amp = require(\"./amp\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {\n        };\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {\n                    };\n                    if (desc.get || desc.set) {\n                        Object.defineProperty(newObj, key, desc);\n                    } else {\n                        newObj[key] = obj[key];\n                    }\n                }\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction defaultHead(inAmpMode = false) {\n    const head = [\n        /*#__PURE__*/ _react.default.createElement(\"meta\", {\n            charSet: \"utf-8\"\n        })\n    ];\n    if (!inAmpMode) {\n        head.push(/*#__PURE__*/ _react.default.createElement(\"meta\", {\n            name: \"viewport\",\n            content: \"width=device-width\"\n        }));\n    }\n    return head;\n}\nfunction onlyReactElement(list, child) {\n    // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n    if (typeof child === 'string' || typeof child === 'number') {\n        return list;\n    }\n    // Adds support for React.Fragment\n    if (child.type === _react.default.Fragment) {\n        return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild)=>{\n            if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n                return fragmentList;\n            }\n            return fragmentList.concat(fragmentChild);\n        }, []));\n    }\n    return list.concat(child);\n}\nconst METATYPES = [\n    'name',\n    'httpEquiv',\n    'charSet',\n    'itemProp'\n];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/ function unique() {\n    const keys = new Set();\n    const tags = new Set();\n    const metaTypes = new Set();\n    const metaCategories = {\n    };\n    return (h)=>{\n        let isUnique = true;\n        let hasKey = false;\n        if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n            hasKey = true;\n            const key = h.key.slice(h.key.indexOf('$') + 1);\n            if (keys.has(key)) {\n                isUnique = false;\n            } else {\n                keys.add(key);\n            }\n        }\n        // eslint-disable-next-line default-case\n        switch(h.type){\n            case 'title':\n            case 'base':\n                if (tags.has(h.type)) {\n                    isUnique = false;\n                } else {\n                    tags.add(h.type);\n                }\n                break;\n            case 'meta':\n                for(let i = 0, len = METATYPES.length; i < len; i++){\n                    const metatype = METATYPES[i];\n                    if (!h.props.hasOwnProperty(metatype)) continue;\n                    if (metatype === 'charSet') {\n                        if (metaTypes.has(metatype)) {\n                            isUnique = false;\n                        } else {\n                            metaTypes.add(metatype);\n                        }\n                    } else {\n                        const category = h.props[metatype];\n                        const categories = metaCategories[metatype] || new Set();\n                        if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n                            isUnique = false;\n                        } else {\n                            categories.add(category);\n                            metaCategories[metatype] = categories;\n                        }\n                    }\n                }\n                break;\n        }\n        return isUnique;\n    };\n}\n/**\n *\n * @param headElements List of multiple <Head> instances\n */ function reduceComponents(headElements, props) {\n    return headElements.reduce((list, headElement)=>{\n        const headElementChildren = _react.default.Children.toArray(headElement.props.children);\n        return list.concat(headElementChildren);\n    }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map((c, i)=>{\n        const key = c.key || i;\n        if (process.env.NODE_ENV !== 'development' && process.env.__NEXT_OPTIMIZE_FONTS && !props.inAmpMode) {\n            if (c.type === 'link' && c.props['href'] && // TODO(prateekbh@): Replace this with const from `constants` when the tree shaking works.\n            [\n                'https://fonts.googleapis.com/css',\n                'https://use.typekit.net/'\n            ].some((url)=>c.props['href'].startsWith(url)\n            )) {\n                const newProps = {\n                    ...c.props || {\n                    }\n                };\n                newProps['data-href'] = newProps['href'];\n                newProps['href'] = undefined;\n                // Add this attribute to make it easy to identify optimized tags\n                newProps['data-optimized-fonts'] = true;\n                return(/*#__PURE__*/ _react.default.cloneElement(c, newProps));\n            }\n        }\n        return(/*#__PURE__*/ _react.default.cloneElement(c, {\n            key\n        }));\n    });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */ function Head({ children  }) {\n    const ampState = (0, _react).useContext(_ampContext.AmpStateContext);\n    const headManager = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n    return(/*#__PURE__*/ _react.default.createElement(_sideEffect.default, {\n        reduceComponentsToState: reduceComponents,\n        headManager: headManager,\n        inAmpMode: (0, _amp).isInAmpMode(ampState)\n    }, children));\n}\nvar _default = Head;\nexports.default = _default;\n\n//# sourceMappingURL=head.js.map"]},"metadata":{},"sourceType":"script"}