{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Franci\\\\Desktop\\\\starting-projects-Udemy\\\\10-starting-project (authentication)\\\\src\\\\components\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 4000) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoredToken(); // const initialToken = localStorage.getItem (\"token\");\n\n  let initialToken;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  ;\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n  const handleLogout = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n\n  const handleLogin = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(handleLogout, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(handleLogout, tokenData.duration);\n    }\n  }, [tokenData, handleLogout]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: handleLogin,\n    logout: handleLogout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"1R5ZYuUvugvd2sReCUgILOGXCPk=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/Franci/Desktop/starting-projects-Udemy/10-starting-project (authentication)/src/components/store/auth-context.js"],"names":["React","useState","useEffect","useCallback","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","handleLogout","clearTimeout","handleLogin","setItem","setTimeout","console","log","contextValue","children"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nconst AuthContext = React.createContext ({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: ( token ) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = ( expirationTime ) => {\r\n  const currentTime = new Date().getTime();\r\n  const adjExpirationTime = new Date( expirationTime ).getTime();\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n\r\n  return remainingDuration;\r\n};\r\n\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remainingTime = calculateRemainingTime( storedExpirationDate );\r\n\r\n  if ( remainingTime <= 4000) {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    token: storedToken,\r\n    duration: remainingTime,\r\n  };\r\n};\r\n\r\nexport const AuthContextProvider = ( props ) => {\r\n  const tokenData = retrieveStoredToken();\r\n  // const initialToken = localStorage.getItem (\"token\");\r\n\r\n  let initialToken;\r\n  if ( tokenData ) {\r\n    initialToken = tokenData.token;\r\n  };\r\n\r\n  const [ token, setToken ] = useState( initialToken );\r\n  const userIsLoggedIn = !!token;\r\n\r\n  const handleLogout = useCallback (\r\n    () => {\r\n      setToken( null );\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"expirationTime\");\r\n\r\n      if ( logoutTimer ) {\r\n        clearTimeout( logoutTimer );\r\n      }\r\n    }, []\r\n  );\r\n\r\n  const handleLogin = ( token, expirationTime ) => {\r\n    setToken( token );\r\n    localStorage.setItem (\r\n      \"token\",\r\n      token\r\n    );\r\n    localStorage.setItem (\r\n      \"expirationTime\",\r\n      expirationTime\r\n    );\r\n\r\n    const remainingTime = calculateRemainingTime ( expirationTime );\r\n\r\n    logoutTimer = setTimeout (\r\n      handleLogout,\r\n      remainingTime\r\n    );\r\n  };\r\n\r\n  useEffect (\r\n    () => {\r\n      if ( tokenData ) {\r\n        console.log( tokenData.duration );\r\n        logoutTimer = setTimeout (\r\n          handleLogout,\r\n          tokenData.duration\r\n        );\r\n      }\r\n    }, [ tokenData, handleLogout ]\r\n  );\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: handleLogin,\r\n    logout: handleLogout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value = { contextValue }>\r\n      { props.children }\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}